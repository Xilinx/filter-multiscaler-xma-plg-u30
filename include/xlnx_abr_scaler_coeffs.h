/*       
 * Copyright (C) 2019, Xilinx Inc - All rights reserved
 * Xilinx Multiscaler XMA Plugin 
 *                                    
 * Licensed under the Apache License, Version 2.0 (the "License"). You may
 * not use this file except in compliance with the License. A copy of the
 * License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations 
 * under the License.
 */        
#ifndef _XLNX_ABR_SCALER_COEFFS_H_
#define _XLNX_ABR_SCALER_COEFFS_H_

/**
 *  @file
 */
#define MIN(a,b)                ((a)<(b))?(a):(b)
#define MAX(a,b)                ((a)>(b))?(a):(b)
#define ABS(a)                  ((a)<0)? (-(a)): (a)
#define CLIP(a,b,c)             ((a)<(b))? (b):(((a)>(c)) ? (c) : (a))
#define ROUNDED_DIV(a,b)        (((a)>0 ? (a) + ((b)>>1) : (a) - ((b)>>1))/(b))
#define SWS_MAX_REDUCE_CUTOFF   0.000001
#define MAX_FILTER_SIZE         12
#define DMA_SIZE                128
#define MAX_OUTS                8
#define HSC_PHASES              64
#define VSC_PHASES              64
#define NR_PHASE_BITS           6
#define NR_PHASES               (1<<NR_PHASE_BITS)
#define HSC_TAPS                12
#define VSC_TAPS                12
#define STEP_PRECISION_SHIFT    16
#define STEP_PRECISION          (1<<STEP_PRECISION_SHIFT)

//#define COEFF_DUMP

#ifdef __cplusplus
extern "C" {
#endif

typedef struct ScalerFilterCoeffs
{
    int16_t             HfltCoeff[HSC_PHASES][HSC_TAPS];	
    int16_t             VfltCoeff[VSC_PHASES][VSC_TAPS];
} ScalerFilterCoeffs;

int16_t fixed_coeff_SR15_0[64][12]=
{
    { 0, 0, 0, 0, -240,  908,  2692,  973,  -240,  -1,  0,  0 },
    {  0,  0, 0,  0,  -239,  875,  2691,  1008,  -239,  -1,  0,  0,   },
    {  0,  0, 0,  0,  -239,  831,  2688,  1053,  -238,  -2,  0,  0,   },
    {  0,  0, 0,  0,  -238,  799,  2685,  1088,  -237,  -3,  0,  0,   },
    {  0,  0, 0,  0,  -237,  767,  2681,  1123,  -236,  -5,  0,  0,   },
    {  0,  0, 0,  0,  -235,  724,  2674,  1170,  -233,  -7,  0,  0,   },
    {  0,  0, 0,  0,  -233,  692,  2669,  1206,  -231,  -9,  0,  0,   },
    {  0,  0, 0,  0,  -231,  661,  2662,  1241,  -229,  -11,  0,  0,  },
    {  0,  0, 0,  0,  -229,  620,  2652,  1289,  -225,  -14,  0,  0,  },
    {  0,  0, 0,  0,  -226,  590,  2643,  1325,  -221,  -17,  0,  0,  },
    {  0,  0, 0,  0,  -224,  560,  2633,  1361,  -218,  -20,  0,  0,  },
    {  0,  0, 0,  0,  -220,  521,  2620,  1409,  -212,  -24,  0,  0,  },
    {  0,  0, 0,  0,  -217,  491,  2608,  1446,  -207,  -27,  0,  0,  },
    {  0,  0, 0,  0,  -214,  463,  2596,  1482,  -202,  -30,  0,  0,  },
    {  0,  0, 0,  0,  -211,  435,  2583,  1518,  -197,  -34,  0,  0,  },
    {  0,  0, 0,  0,  -206,  398,  2564,  1566,  -189,  -39,  0,  0,  },
    {  0,  0, 0,  0,  -203,  371,  2549,  1601,  -183,  -43,  0,  0,  },
    {  0,  0, 0,  0,  -198,  336,  2528,  1649,  -174,  -48,  0,  0,  },
    {  0,  0, 0,  0,  -194,  310,  2511,  1685,  -166,  -53,  0,  0,  },
    {  0,  0, 0,  0,  -190,  284,  2493,  1721,  -158,  -57,  0,  0,  },
    {  0,  0, 0,  0,  -184,  251,  2468,  1768,  -147,  -63,  0,  0,  },
    {  0,  0, 0,  0,  -179,  227,  2448,  1803,  -137,  -68,  0,  0,  },
    {  0,  0, 0,  0,  -175,  203,  2427,  1838,  -128,  -73,  0,  0,  },
    {  0,  0, 0,  0,  -169,  173,  2398,  1885,  -114,  -79,  0,  0,  },
    {  0,  0, 0,  0,  -164,  151,  2376,  1919,  -103,  -84,  0,  0,  },
    {  0,  0, 0,  0,  -159,  129,  2352,  1952,  -92,  -89,  0,  0,   },
    {  0,  0, 0,  0,  -154,  109,  2328,  1985,  -80,  -94,  0,  0,   },
    {  0,  0, 0,  0,  -148,  82,  2294,  2029,  -63,  -101,  0,  0,   },
    {  0,  0, 0,  0,  -143,  63,  2268,  2061,  -50,  -106,  0,  0,   },
    {  0,  0, 0,  0,  -138,  45,  2241,  2092,  -36,  -111,  0,  0,   },
    {  0,  0, 0,  0,  -131,  22,  2204,  2133,  -16,  -118,  0,  0,   },
    {  0,  0, 0,  0,  -126,  5,  2175,  2163,  -1,  -123,  0,  0,     },
    { 0,   0, 0, 0,   -120,  -10,  2146,  2192,  15,  -129,  0,  0,   },
    {  0,  0, 0,  0,  -113,  -30,  2105,  2230,  38,  -136,  0,  0,   },
    {  0,  0, 0,  0,  -108,  -44,  2074,  2257,  55,  -141,  0,  0,   },
    {  0,  0, 0,  0,  -103,  -57,  2042,  2284,  74,  -146,  0,  0,   },
    {  0,  0, 0,  0,  -96,  -74,  1999,  2318,  100,  -152,  0,  0,   },
    {  0,  0, 0,  0,  -91,  -87,  1966,  2342,  121,  -157,  0,  0,   },
    {  0,  0, 0,  0,  -86,  -98,  1932,  2366,  142,  -162,  0,  0,   },
    {  0,  0, 0,  0,  -79,  -113,  1887,  2397,  171,  -168,  0,  0,  },
    {  0,  0, 0,  0,  -75,  -124,  1853,  2419,  194,  -173,  0,  0,  },
    {  0,  0, 0,  0,  -70,  -133,  1818,  2440,  217,  -178,  0,  0,  },
    {  0,  0, 0,  0,  -64,  -146,  1771,  2466,  249,  -184,  0,  0,  },
    {  0,  0, 0,  0,  -59,  -155,  1735,  2486,  274,  -188,  0,  0,  },
    {  0,  0, 0,  0,  -54,  -163,  1700,  2504,  299,  -192,  0,  0,  },
    {  0,  0, 0,  0,  -49,  -173,  1652,  2527,  334,  -197,  0,  0,  },
    {  0,  0, 0,  0,  -45,  -180,  1616,  2543,  360,  -201,  0,  0,  },
    {  0,  0, 0,  0,  -40,  -187,  1580,  2559,  387,  -205,  0,  0,  },
    {  0,  0, 0,  0,  -39,  -189,  1568,  2563,  397,  -206,  0,  0,  },
    {  0,  0, 0,  0,  -32,  -200,  1497,  2591,  451,  -213,  0,  0,  },
    {  0,  0, 0,  0,  -28,  -205,  1460,  2603,  480,  -216,  0,  0,  },
    {  0,  0, 0,  0,  -24,  -212,  1412,  2619,  518,  -220,  0,  0,  },
    {  0,  0, 0,  0,  -21,  -216,  1376,  2629,  548,  -223,  0,  0,  },
    {  0,  0, 0,  0,  -18,  -220,  1340,  2639,  578,  -225,  0,  0,  },
    {  0,  0, 0,  0,  -14,  -224,  1292,  2651,  618,  -228,  0,  0,  },
    {  0,  0, 0,  0,  -12,  -227,  1256,  2659,  649,  -231,  0,  0,  },
    {  0,  0, 0,  0,  -10,  -230,  1220,  2666,  680,  -232,  0,  0,  },
    {  0,  0, 0,  0,  -7,  -233,  1173,  2674,  722,  -235,  0,  0,   },
    {  0,  0, 0,  0,  -5,  -235,  1138,  2679,  753,  -236,  0,  0,   },
    {  0,  0, 0,  0,  -4,  -236,  1103,  2683,  786,  -237,  0,  0,   },
    {  0,  0, 0,  0,  -2,  -238,  1056,  2688,  829,  -238,  0,  0,   },
    {  0,  0, 0,  0,  -1,  -239,  1022,  2690,  862,  -239,  0,  0,   },
    {  0,  0, 0,  0,  -1,  -239,  1022,  2690,  862,  -239,  0,  0,   },
    {  0,  0, 0,  0,  -1,  -239,  1022,  2690,  862,  -239,  0,  0,   }
};

int16_t fixed_coeff_SR13_0[64][12]=
{
    {  0,  0, 0,  0,  -253,  1837,  2621,  -35,  -75,  0,  0,  0,   },
    {  0,  0, 0,  0,  -259,  1781,  2666,  -11,  -83,  0,  0,  0,   },
    {  0,  0, 0,  0,  -262,  1743,  2695,  6,  -88,  0,  0,  0,     },
    {  0,  0, 0,  0,  -266,  1686,  2737,  34,  -97,  0,  0,  0,    },
    {  0,  0, 0,  0,  -269,  1648,  2763,  54,  -102,  0,  0,  0,   },
    {  0,  0, 0,  0,  -272,  1590,  2802,  85,  -111,  0,  0,  0,   },
    {  0,  0, 0,  0,  -273,  1551,  2826,  107,  -117,  0,  0,  0,  },
    {  0,  0, 0,  0,  -274,  1492,  2860,  141,  -125,  0,  0,  0,  },
    {  0,  0, 0,  0,  -275,  1453,  2882,  165,  -131,  0,  0,  0,  },
    {  0,  0, 0,  0,  -275,  1393,  2912,  203,  -140,  0,  0,  0,  },
    {  0,  0, 0,  0,  -274,  1354,  2931,  229,  -145,  0,  0,  0,  },
    {  0,  0, 0,  0,  -273,  1295,  2957,  269,  -154,  0,  0,  0,  },
    {  0,  0, 0,  0,  -271,  1234,  2982,  312,  -163,  0,  0,  0,  },
    {  0,  0, 0,  0,  -269,  1195,  2996,  341,  -169,  0,  0,  0,  },
    {  0,  0, 0,  0,  -267,  1155,  3010,  370,  -174,  0,  0,  0,  },
    {  0,  0, 0,  0,  -264,  1097,  3028,  416,  -183,  0,  0,  0,  },
    {  0,  0, 0,  0,  -261,  1058,  3038,  447,  -188,  0,  0,  0,  },
    {  0,  0, 0,  0,  -257,  1000,  3052,  495,  -196,  0,  0,  0,  },
    {  0,  0, 0,  0,  -254,  962,  3060,  527,  -201,  0,  0,  0,   },
    {  0,  0, 0,  0,  -249,  906,  3069,  577,  -209,  0,  0,  0,   },
    {  0,  0, 0,  0,  -245,  868,  3074,  611,  -214,  0,  0,  0,   },
    {  0,  0, 0,  0,  -239,  813,  3079,  662,  -221,  0,  0,  0,   },
    {  0,  0, 0,  0,  -235,  777,  3081,  697,  -225,  0,  0,  0,   },	
    {  0,  0, 0,  0,  -229,  723,  3081,  751,  -232,  0,  0,  0,   },
    {  0,  0, 0,  0,  -224,  688,  3080,  787,  -236,  0,  0,  0,   },
    {  0,  0, 0,  0,  -217,  635,  3077,  842,  -242,  0,  0,  0,   },
    {  0,  0, 0,  0,  -212,  601,  3073,  879,  -246,  0,  0,  0,   },
    {  0,  0, 0,  0,  -205,  551,  3065,  935,  -252,  0,  0,  0,   },
    {  0,  0, 0,  0,  -200,  518,  3058,  973,  -255,  0,  0,  0,   },
    {  0,  0, 0,  0,  -192,  470,  3045,  1030,  -259,  0,  0,  0,  },
    {  0,  0, 0,  0,  -186,  438,  3036,  1069,  -262,  0,  0,  0,  },
    {  0,  0, 0,  0,  -178,  392,  3019,  1127,  -266,  0,  0,  0,  },
    {  0,  0, 0,  0,  -173,  362,  3006,  1166,  -268,  0,  0,  0,  },
    {  0,  0, 0,  0,  -164,  318,  2986,  1225,  -271,  0,  0,  0,  },
    {  0,  0, 0,  0,  -158,  289,  2970,  1266,  -272,  0,  0,  0,  },
    {  0,  0, 0,  0,  -150,  248,  2944,  1325,  -274,  0,  0,  0,  },
    {  0,  0, 0,  0,  -144,  221,  2926,  1365,  -274,  0,  0,  0,  },
    {  0,  0, 0,  0,  -135,  183,  2897,  1424,  -275,  0,  0,  0,  },
    {  0,  0, 0,  0,  -129,  158,  2876,  1464,  -275,  0,  0,  0,  },
    {  0,  0, 0,  0,  -121,  123,  2843,  1522,  -274,  0,  0,  0,  },
    {  0,  0, 0,  0,  -115,  101,  2819,  1562,  -273,  0,  0,  0,  },
    {  0,  0, 0,  0,  -106,  68,  2782,  1620,  -270,  0,  0,  0,   },
    {  0,  0, 0,  0,  -101,  48,  2756,  1658,  -268,  0,  0,  0,   },
    {  0,  0, 0,  0,  -92,  20,  2715,  1716,  -264,  0,  0,  0,    },
    {  0,  0, 0,  0,  -87,  2,  2687,  1754,  -261,  0,  0,  0,     },
    {  0,  0, 0,  0,  -79,  -24,  2643,  1810,  -256,  -1,  0,  0,  },
    {  0,  0, 0,  0,  -73,  -40,  2613,  1847,  -252,  -1,  0,  0,  },
    {  0,  0, 0,  0,  -66,  -63,  2567,  1903,  -245,  -2,  0,  0,  },
    {  0,  0, 0,  0,  -61,  -77,  2535,  1940,  -240,  -3,  0,  0,  },
    {  0,  0, 0,  0,  -54,  -98,  2488,  1995,  -232,  -6,  0,  0,  },
    {  0,  0, 0,  0,  -49,  -111,  2455,  2031,  -225,  -8,  0,  0, },
    {  0,  0, 0,  0,  -42,  -129,  2406,  2085,  -215,  -11,  0,  0,},
    {  0,  0, 0,  0,  -38,  -140,  2373,  2121,  -208,  -13,  0,  0,},
    {  0,  0, 0,  0,  -32,  -157,  2322,  2174,  -196,  -18,  0,  0,},
    {  0,  0, 0,  0,  -28,  -167,  2288,  2209,  -188,  -21,  0,  0,},
    {  0,  0, 0,  0,  -23,  -182,  2235,  2263,  -174,  -26,  0,  0,},
    {  0,  0, 0,  0,  -20,  -190,  2200,  2297,  -164,  -29,  0,  0,},
    {  0,  0, 0,  0,  -15,  -203,  2147,  2349,  -149,  -35,  0,  0,},
    {  0,  0, 0,  0,  -13,  -210,  2111,  2382,  -137,  -39,  0,  0,},
    {  0,  0, 0,  0,  -9,  -221,  2057,  2432,  -120,  -46,  0,  0, },
    {  0,  0, 0,  0,  -7,  -227,  2021,  2464,  -107,  -50,  0,  0, },
    {  0,  0, 0,  0,  -4,  -236,  1966,  2513,  -87,  -57,  0,  0,  },
    {  0,  0, 0,  0,  -3,  -241,  1929,  2544,  -73,  -62,  0,  0,  },
    {  0,  0, 0,  0,  -1,  -249,  1874,  2591,  -51,  -70,  0,  0,  }
};
int16_t fixed_coeff_SR25_0[64][12]=
{
    { 24, 71, 151, 403, 842, 1087, 854, 415, 155, 60, 24, 9},
    { 23, 70, 149, 400, 838, 1087, 857, 418, 156, 61, 25, 9 },
    { 23, 69, 147, 394, 831, 1087, 864, 424, 158, 62, 25, 9 },
    { 22, 68, 144, 388, 824, 1087, 870, 430, 160, 63, 26, 9 },
    { 22, 67, 142, 383, 818, 1086, 877, 436, 163, 64, 26, 9 },
    { 22, 66, 140, 377, 811, 1085, 883, 443, 165, 65, 27, 9 },
    { 21, 65, 138, 372, 804, 1084, 889, 449, 168, 66, 27, 9 },
    { 21, 64, 137, 366, 797, 1083, 895, 455, 170, 68, 28, 9 },
    { 20, 63, 135, 361, 790, 1083, 902, 462, 173, 69, 28, 9 },
    { 20, 62, 133, 355, 783, 1081, 907, 468, 175, 70, 29, 9 },
    { 20, 61, 131, 350, 776, 1080, 914, 475, 178, 71, 29, 10 },
    { 19, 60, 129, 345, 769, 1079, 919, 481, 181, 72, 30, 10 },
    { 19, 59, 127, 339, 762, 1077, 925, 487, 184, 73, 30, 10 },
    { 18, 58, 125, 334, 755, 1075, 931, 494, 186, 74, 31, 10 },
    { 18, 57, 123, 329, 748, 1073, 937, 501, 190, 75, 31, 10 },
    { 18, 57, 122, 324, 740, 1071, 942, 507, 193, 77, 32, 10 },
    { 17, 56, 120, 319, 733, 1069, 948, 514, 196, 78, 33, 10 },
    { 17, 55, 119, 314, 726, 1067, 953, 521, 199, 79, 33, 10 },
    { 17, 54, 117, 309, 719, 1064, 959, 528, 202, 80, 34, 11 },
    { 16, 53, 115, 304, 712, 1062, 964, 534, 205, 81, 34, 11 },
    { 16, 52, 114, 300, 705, 1059, 969, 541, 208, 83, 35, 11 },
    { 16, 51, 112, 295, 697, 1057, 974, 548, 211, 84, 36, 11 },
    { 16 , 50, 111, 290, 690, 1054, 979, 555, 215, 85, 36, 11 },
    { 15, 50, 109, 286, 683, 1051, 984, 562, 218, 86, 37, 11 },
    { 15, 49, 108, 281, 676, 1048, 988, 569, 221, 88, 38, 12 },
    { 15, 48, 106, 277, 669, 1045, 993, 576, 225, 89, 38, 12 },
    { 14, 47, 105, 272, 661, 1042, 998, 583, 229, 90, 39, 12 },
    { 14, 46, 104, 268, 655, 1038, 1002, 590, 233, 91, 40, 12 },
    { 14, 46, 102, 264, 647, 1035, 1007, 597, 236, 93, 40, 12 },
    { 14, 45, 100, 260, 640, 1031, 1011, 604, 240, 94, 41, 13 },
    { 13, 44, 99, 256, 633, 1027, 1015, 611, 244, 95, 42, 13 },
    { 13, 43, 98, 252, 626, 1023, 1019, 619, 248, 96, 43, 13 },
    { 13, 42, 96, 246, 615, 1017, 1025, 630, 254, 98, 44, 14  },
    { 13, 42, 95, 244, 611, 1015, 1027, 633, 256, 99, 44, 13 },
    { 13, 41, 94, 240, 604, 1011, 1031, 640, 260, 100, 45, 14 },
    { 12, 40, 93, 236, 597, 1007, 1035, 647, 264, 102, 46, 14 },
    { 12, 40, 91, 233, 590, 1002, 1038, 655, 268, 104, 46, 14 },
    { 12, 39, 90, 229, 583, 998, 1042, 661, 272, 105, 47, 14 },
    { 12, 38, 89, 225, 576, 993, 1045, 669, 277, 106, 48, 15 },
    { 12, 38, 88, 221, 569, 988, 1048, 676, 281, 108, 49, 15 },
    { 11, 37, 86, 218, 562, 984, 1051, 683, 286, 109, 50, 15 },
    { 11, 36, 85, 215, 555, 979, 1054, 690, 290, 111, 50, 16 },
    { 11, 36, 84, 211, 548, 974, 1057, 697, 295, 112, 51, 16 },
    { 11, 35, 83, 208, 541, 969, 1059, 705, 300, 114, 52, 16 },
    { 11, 34, 81, 205, 534, 964, 1062, 712, 304, 115, 53, 16 },
    { 11, 34, 80, 202, 528, 959, 1064, 719, 309, 117, 54, 17 },
    { 10, 33, 79, 199, 521, 953, 1067, 726, 314, 119, 55, 17 },
    { 10, 33, 78, 196, 514, 948, 1069, 733, 319, 120, 56, 17 },
    { 10, 32, 77, 193, 507, 942, 1071, 740, 324, 122, 57, 18 },
    { 10, 31, 75, 190, 501, 937, 1073, 748, 329, 123, 57, 18 },
    { 10, 31, 74, 186, 494, 931, 1075, 755, 334, 125, 58, 18 },
    { 10, 30, 73, 184, 487, 925, 1077, 762, 339, 127, 59, 19 },
    { 10, 30, 72, 181, 481, 919, 1079, 769, 345, 129, 60, 19 },
    { 10, 29, 71, 178, 475, 914, 1080, 776, 350, 131, 61, 20 },
    { 9, 29, 70, 175, 468, 907, 1081, 783, 355, 133, 62, 20 },
    { 9, 28, 69, 173, 462, 902, 1083, 790, 361, 135, 63, 20 },
    { 9, 28, 68, 170, 455, 895, 1083, 797, 366, 137, 64, 21 },
    { 9, 27, 66, 168, 449, 889, 1084, 804, 372, 138, 65, 21 },
    { 9, 27, 65, 165, 443, 883, 1085, 811, 377, 140, 66, 22 },
    { 9, 26, 64, 163, 436, 877, 1086, 818, 383, 142, 67, 22 },
    { 9, 26, 63, 160, 430, 870, 1087, 824, 388, 144, 68, 22 },
    { 9, 25, 62, 158, 424, 864, 1087, 831, 394, 147, 69, 23 },
    { 9, 25, 61, 156, 418, 857, 1087, 838, 400, 149, 70, 23 },
    { 9, 24, 60, 153, 412, 851, 1087, 845, 406, 151, 71, 24 }   	
};

int16_t fixed_coeff_taps6in12[64][12] =
{
    {0,   0,   0,  -132,  236,   3824,   236,  -132,    64,   0,   0,   0 },
    {0,   0,   0,  -116,  184,   3816,   292,  -144,    64,   0,   0,   0 },
    {0,   0,   0,  -100,  132,   3812,   348,  -160,    64,   0,   0,   0 },
    {0,   0,   0,  -88,   84,    3808,   404,  -176,    64,   0,   0,   0 },
    {0,   0,   0,  -72,   36,    3796,   464,  -192,    64,   0,   0,   0 },
    {0,   0,   0,  -60,   -8,    3780,   524,  -208,    68,   0,   0,   0 },
    {0,   0,   0,  -48,   -52,   3768,   588,  -228,    68,   0,   0,   0 },
    {0,   0,   0,  -32,   -96,   3748,   652,  -244,    68,   0,   0,   0 },
    {0,   0,   0,  -20,   -136,  3724,   716,  -260,    72,   0,   0,   0 },
    {0,   0,   0,   -8,   -172,  3696,   784,  -276,    72,   0,   0,   0 },
    {0,   0,   0,    0,   -208,  3676,   848,  -292,    72,   0,   0,   0 },
    {0,   0,   0,   12,   -244,  3640,   920,  -308,    76,   0,   0,   0 },
    {0,   0,   0,   20,   -276,  3612,   988,  -324,    76,   0,   0,   0 },
    {0,   0,   0,   32,   -304,  3568,  1060,  -340,    80,   0,   0,   0 },
    {0,   0,   0,   40,   -332,  3532,  1132,  -356,    80,   0,   0,   0 },
    {0,   0,   0,   48,   -360,  3492,  1204,  -372,    84,   0,   0,   0 },
    {0,   0,   0,   56,   -384,  3448,  1276,  -388,    88,   0,   0,   0 },
    {0,   0,   0,   64,   -408,  3404,  1352,  -404,    88,   0,   0,   0 },
    {0,   0,   0,   72,   -428,  3348,  1428,  -416,    92,   0,   0,   0 },
    {0,   0,   0,   76,   -448,  3308,  1500,  -432,    92,   0,   0,   0 },
    {0,   0,   0,   84,   -464,  3248,  1576,  -444,    96,   0,   0,   0 },
    {0,   0,   0,   88,   -480,  3200,  1652,  -460,    96,   0,   0,   0 },
    {0,   0,   0,   92,   -492,  3140,  1728,  -472,   100,   0,   0,   0 },
    {0,   0,   0,   96,   -504,  3080,  1804,  -484,   104,   0,   0,   0 },
    {0,   0,   0,   100,  -516,  3020,  1880,  -492,   104,   0,   0,   0 },
    {0,   0,   0,   104,  -524,  2956,  1960,  -504,   104,   0,   0,   0 },
    {0,   0,   0,   104,  -532,  2892,  2036,  -512,   108,   0,   0,   0 },
    {0,   0,   0,   108,  -540,  2832,  2108,  -520,   108,   0,   0,   0 },
    {0,   0,   0,   108,  -544,  2764,  2184,  -528,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -544,  2688,  2260,  -532,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -548,  2624,  2336,  -540,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -548,  2556,  2408,  -544,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -544,  2480,  2480,  -544,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -544,  2408,  2556,  -548,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -540,  2336,  2624,  -548,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -532,  2260,  2688,  -544,   112,   0,   0,   0 },
    {0,   0,   0,   112,  -528,  2184,  2764,  -544,   108,   0,   0,   0 },
    {0,   0,   0,   108,  -520,  2108,  2832,  -540,   108,   0,   0,   0 },
    {0,   0,   0,   108,  -512,  2036,  2892,  -532,   104,   0,   0,   0 },
    {0,   0,   0,   104,  -504,  1960,  2956,  -524,   104,   0,   0,   0 },
    {0,   0,   0,   104,  -492,  1880,  3020,  -516,   100,   0,   0,   0 },
    {0,   0,   0,   104,  -484,  1804,  3080,  -504,    96,   0,   0,   0 },
    {0,   0,   0,   100,  -472,  1728,  3140,  -492,    92,   0,   0,   0 },
    {0,   0,   0,   96,   -460,  1652,  3200,  -480,    88,   0,   0,   0 },
    {0,   0,   0,   96,   -444,  1576,  3248,  -464,    84,   0,   0,   0 },
    {0,   0,   0,   92,   -432,  1500,  3308,  -448,    76,   0,   0,   0 },
    {0,   0,   0,   92,   -416,  1428,  3348,  -428,    72,   0,   0,   0 },
    {0,   0,   0,   88,   -404,  1352,  3404,  -408,    64,   0,   0,   0 },
    {0,   0,   0,   88,   -388,  1276,  3448,  -384,    56,   0,   0,   0 },
    {0,   0,   0,   84,   -372,  1204,  3492,  -360,    48,   0,   0,   0 },
    {0,   0,   0,   80,   -356,  1132,  3532,  -332,    40,   0,   0,   0 },
    {0,   0,   0,   80,   -340,  1060,  3568,  -304,    32,   0,   0,   0 },
    {0,   0,   0,   76,   -324,   988,  3612,  -276,    20,   0,   0,   0 },
    {0,   0,   0,   76,   -308,   920,  3640,  -244,    12,   0,   0,   0 },
    {0,   0,   0,   72,   -292,   848,  3676,  -208,     0,   0,   0,   0 },
    {0,   0,   0,   72,   -276,   784,  3696,  -172,    -8,   0,   0,   0 },
    {0,   0,   0,   72,   -260,   716,  3724,  -136,   -20,   0,   0,   0 },
    {0,   0,   0,   68,   -244,   652,  3748,   -96,   -32,   0,   0,   0 },
    {0,   0,   0,    68,  -228,   588,  3768,   -52,   -48,   0,   0,   0 },
    {0,   0,   0,   68,   -208,   524,  3780,    -8,   -60,   0,   0,   0 },
    {0,   0,   0,   64,   -192,   464,  3796,    36,   -72,   0,   0,   0 },
    {0,   0,   0,   64,   -176,   404,  3808,    84,   -88,   0,   0,   0 },
    {0,   0,   0,   64,   -160,   348,  3812,   132,  -100,   0,   0,   0 },
    {0,   0,   0,   64,   -144,   292,  3816,   184,  -116,   0,   0,   0 }
};

int16_t fixed_coeff_taps8in12[64][12] =
{
    {0,  0,  -5, 309, 1023, 1445, 1034, 317, -3, -24,  0,  0 },
    {0,  0,  -6, 300, 1011, 1445, 1045, 326, -1, -24,  0,  0 },
    {0,  0,  -7, 291, 1000, 1444, 1056, 336, 0, -24,   0,  0 },
    {0,  0,  -9, 282, 988, 1444, 1067, 345, 2, -24,    0,  0 },
    {0,  0,  -10, 274, 977, 1443, 1078, 354, 4, -24,   0,  0 },
    {0,  0,  -11, 266, 965, 1441, 1089, 364, 6, -24,   0,  0 },
    {0,  0,  -12, 258, 953, 1440, 1100, 373, 8, -24,   0,  0 },
    {0,  0,  -13, 250, 942, 1438, 1110, 383, 10, -24,  0,  0 },
    {0,  0,  -14, 242, 930, 1437, 1121, 393, 12, -24,  0,  0 },
    {0,  0,  -15, 234, 918, 1434, 1131, 403, 14, -24,  0,  0 },
    {0,  0,  -16, 226, 906, 1432, 1142, 413, 17, -24,  0,  0 },
    {0,  0,  -17, 219, 894, 1430, 1152, 423, 19, -24,  0,  0 },
    {0,  0,  -17, 211, 882, 1427, 1162, 433, 22, -24,  0,  0 },
    {0,  0,  -18, 204, 870, 1424, 1172, 443, 24, -24,  0,  0 },
    {0,  0,  -19, 197, 858, 1420, 1182, 454, 27, -24,  0,  0 },
    {0,  0,  -19, 190, 846, 1417, 1191, 464, 30, -24,  0,  0 },
    {0,  0,  -20, 183, 834, 1413, 1201, 475, 33, -24,  0,  0 },
    {0,  0,  -20, 176, 822, 1409, 1210, 486, 36, -24,  0,  0  },
    {0,  0,  -21, 170, 810, 1405, 1220, 497, 39, -24,  0,  0  },
    {0,  0,  -21, 163, 798, 1401, 1229, 507, 42, -24,  0,  0  },
    {0,  0,  -22, 157, 786, 1396, 1238, 518, 46, -24,  0,  0  },
    {0,  0,  -22, 151, 774, 1392, 1247, 529, 49, -24,  0,  0  },
    {0,  0,  -22, 144, 762, 1387, 1255, 540, 53, -24,  0,  0  },
    {0,  0,  -23, 139, 750, 1382, 1264, 552, 57, -24,  0,  0  },
    {0,  0,  -23, 133, 738, 1376, 1272, 563, 60, -24,  0,  0  },
    {0,  0,  -23, 127, 726, 1371, 1280, 574, 64, -24,  0,  0  },
    {0,  0,  -23, 121, 714, 1365, 1288, 586, 69, -24,  0,  0  },
    {0,  0,  -23, 116, 703, 1359, 1296, 597, 73, -24,  0,  0  },
    {0,  0,  -24, 111, 691, 1353, 1304, 609, 77, -24,  0,  0  },
    {0,  0,  -24, 105, 679, 1346, 1312, 620, 81, -24,  0,  0  },
    {0,  0,  -24, 100, 667, 1340, 1319, 632, 86, -24,  0,  0  },
    {0,  0,  -24, 96, 655, 1333, 1326, 644, 91, -24,   0,  0  },
    {0,  0,  -24, 91, 644, 1326, 1333, 655, 96, -24,   0,  0  },
    {0,  0,  -24, 86, 632, 1319, 1340, 667, 100, -24,  0,  0  },
    {0,  0,  -24, 81, 620, 1312, 1346, 679, 105, -24,  0,  0  },
    {0,  0,  -24, 77, 609, 1304, 1353, 691, 111, -24,  0,  0  },
    {0,  0,  -24, 73, 597, 1296, 1359, 703, 116, -23,  0,  0  },
    {0,  0,  -24, 69, 586, 1288, 1365, 714, 121, -23,  0,  0  },
    {0,  0,  -24, 64, 574, 1280, 1371, 726, 127, -23,  0,  0  },
    {0,  0,  -24, 60, 563, 1272, 1376, 738, 133, -23,  0,  0  },
    {0,  0,  -24, 57, 552, 1264, 1382, 750, 139, -23,  0,  0  },
    {0,  0,  -24, 53, 540, 1255, 1387, 762, 144, -22,  0,  0  },
    {0,  0,  -24, 49, 529, 1247, 1392, 774, 151, -22,  0,  0  },
    {0,  0,  -24, 46, 518, 1238, 1396, 786, 157, -22,  0,  0  },
    {0,  0,  -24, 42, 507, 1229, 1401, 798, 163, -21,  0,  0  },
    {0,  0,  -24, 39, 497, 1220, 1405, 810, 170, -21,  0,  0  },
    {0,  0,  -24, 36, 486, 1210, 1409, 822, 176, -20,  0,  0  },
    {0,  0,  -24, 33, 475, 1201, 1413, 834, 183, -20,  0,  0  },
    {0,  0,  -24, 30, 464, 1191, 1417, 846, 190, -19,  0,  0  },
    {0,  0,  -24, 27, 454, 1182, 1420, 858, 197, -19,  0,  0  },
    {0,  0,  -24, 24, 443, 1172, 1424, 870, 204, -18,  0,  0  },
    {0,  0,  -24, 22, 433, 1162, 1427, 882, 211, -17,  0,  0  },
    {0,  0,  -24, 19, 423, 1152, 1430, 894, 219, -17,  0,  0  },
    {0,  0,  -24, 17, 413, 1142, 1432, 906, 226, -16,  0,  0  },
    {0,  0,  -24, 14, 403, 1131, 1434, 918, 234, -15,  0,  0  },
    {0,  0,  -24, 12, 393, 1121, 1437, 930, 242, -14,  0,  0  },
    {0,  0,  -24, 10, 383, 1110, 1438, 942, 250, -13,  0,  0  },
    {0,  0,  -24, 8, 373, 1100, 1440, 953, 258, -12,   0,  0  },
    {0,  0,  -24, 6, 364, 1089, 1441, 965, 266, -11,   0,  0  },
    {0,  0,  -24, 4, 354, 1078, 1443, 977, 274, -10,   0,  0  },
    {0,  0,  -24, 2, 345, 1067, 1444, 988, 282, -9,    0,  0  },
    {0,  0,  -24, 0, 336, 1056, 1444, 1000, 291, -7,   0,  0  },
    {0,  0,  -24, -1, 326, 1045, 1445, 1011, 300, -6,  0,  0  },
    {0,  0,  -24, -3, 317, 1034, 1445, 1023, 309, -5,  0,  0  },
};

int16_t fixed_coeff_taps10in12[64][12] =
{
    {0, 59, 224, 507, 790, 911, 793, 512, 227, 61, 13, 0 },
    {0, 58, 220, 502, 786, 911, 797, 516, 231, 62, 13, 0 },
    {0, 56, 216, 497, 783, 911, 800, 521, 235, 64, 13, 0 },
    {0, 55, 213, 492, 779, 910, 804, 526, 238, 65, 13, 0 },
    {0, 54, 209, 487, 775, 910, 807, 531, 242, 67, 14, 0 },
    {0, 52, 206, 482, 772, 910, 810, 536, 246, 69, 14, 0 },
    {0, 51, 202, 477, 768, 909, 813, 541, 250, 70, 14, 0 },
    {0, 50, 199, 473, 764, 909, 817, 545, 254, 72, 14, 0 },
    {0, 48, 195, 468, 760, 908, 820, 550, 258, 74, 15, 0 },
    {0, 47, 192, 463, 756, 908, 823, 555, 262, 76, 15, 0 },
    {0, 46, 188, 458, 752, 907, 826, 560, 266, 78, 15, 0 },
    {0, 45, 185, 453, 748, 906, 829, 565, 270, 79, 16, 0 },
    {0, 44, 182, 448, 744, 906, 832, 569, 274, 81, 16, 0 },
    {0, 42, 179, 444, 740, 905, 835, 574, 278, 83, 16, 0 },
    {0, 41, 175, 439, 736, 904, 837, 579, 282, 85, 17, 0 },
    {0, 40, 172, 434, 732, 903, 840, 584, 286, 87, 17, 0 },
    {0, 39, 169, 429, 728, 902, 843, 589, 290, 89, 18, 0 },
    {0, 38, 166, 425, 724, 901, 846, 593, 294, 91, 18, 0 },
    {0, 37, 163, 420, 720, 900, 848, 598, 298, 93, 18, 0 },
    {0, 36, 160, 415, 716, 899, 851, 603, 302, 95, 19, 0 },
    {0, 35, 157, 410, 711, 897, 854, 608, 307, 98, 19, 0 },
    {0, 34, 154, 406, 707, 896, 856, 612, 311, 100, 20, 0 },
    {0, 33, 151, 401, 703, 895, 859, 617, 315, 102, 20, 0 },
    {0, 33, 148, 396, 698, 893, 861, 622, 320, 104, 21, 0 },
    {0, 32, 145, 392, 694, 892, 863, 626, 324, 107, 21, 0 },
    {0, 31, 142, 387, 690, 890, 866, 631, 328, 109, 22, 0 },
    {0, 30, 140, 382, 685, 889, 868, 636, 333, 111, 23, 0 },
    {0, 29, 137, 378, 681, 887, 870, 640, 337, 114, 23, 0 },
    {0, 28, 134, 373, 677, 886, 872, 645, 342, 116, 24, 0 },
    {0, 28, 131, 369, 672, 884, 874, 649, 346, 119, 24, 0 },
    {0, 27, 129, 364, 668, 882, 876, 654, 350, 121, 25, 0 },
    {0, 26, 126, 359, 663, 880, 878, 659, 355, 124, 26, 0 },
    {0, 26, 124, 355, 659, 878, 880, 663, 359, 126, 26, 0 },
    {0, 25, 121, 350, 654, 876, 882, 668, 364, 129, 27, 0 },
    {0, 24, 119, 346, 649, 874, 884, 672, 369, 131, 28, 0 },
    {0, 24, 116, 342, 645, 872, 886, 677, 373, 134, 28, 0 },
    {0, 23, 114, 337, 640, 870, 887, 681, 378, 137, 29, 0 },
    {0, 23, 111, 333, 636, 868, 889, 685, 382, 140, 30, 0 },
    {0, 22, 109, 328, 631, 866, 890, 690, 387, 142, 31, 0 },
    {0, 21, 107, 324, 626, 863, 892, 694, 392, 145, 32, 0 },
    {0, 21, 104, 320, 622, 861, 893, 698, 396, 148, 33, 0 },
    {0, 20, 102, 315, 617, 859, 895, 703, 401, 151, 33, 0 },
    {0, 20, 100, 311, 612, 856, 896, 707, 406, 154, 34, 0 },
    {0, 19, 98, 307, 608, 854, 897, 711, 410, 157, 35, 0 },
    {0, 19, 95, 302, 603, 851, 899, 716, 415, 160, 36, 0 },
    {0, 18, 93, 298, 598, 848, 900, 720, 420, 163, 37, 0 },
    {0, 18, 91, 294, 593, 846, 901, 724, 425, 166, 38, 0 },
    {0, 18, 89, 290, 589, 843, 902, 728, 429, 169, 39, 0 },
    {0, 17, 87, 286, 584, 840, 903, 732, 434, 172, 40, 0 },
    {0, 17, 85, 282, 579, 837, 904, 736, 439, 175, 41, 0 },
    {0, 16, 83, 278, 574, 835, 905, 740, 444, 179, 42, 0 },
    {0, 16, 81, 274, 569, 832, 906, 744, 448, 182, 44, 0 },
    {0, 16, 79, 270, 565, 829, 906, 748, 453, 185, 45, 0 },
    {0, 15, 78, 266, 560, 826, 907, 752, 458, 188, 46, 0 },
    {0, 15, 76, 262, 555, 823, 908, 756, 463, 192, 47, 0 },
    {0, 15, 74, 258, 550, 820, 908, 760, 468, 195, 48, 0 },
    {0, 14, 72, 254, 545, 817, 909, 764, 473, 199, 50, 0 },
    {0, 14, 70, 250, 541, 813, 909, 768, 477, 202, 51, 0 },
    {0, 14, 69, 246, 536, 810, 910, 772, 482, 206, 52, 0 },
    {0, 14, 67, 242, 531, 807, 910, 775, 487, 209, 54, 0 },
    {0, 13, 65, 238, 526, 804, 910, 779, 492, 213, 55, 0 },
    {0, 13, 64, 235, 521, 800, 911, 783, 497, 216, 56, 0 },
    {0, 13, 62, 231, 516, 797, 911, 786, 502, 220, 58, 0 },
    {0, 13, 61, 227, 512, 793, 911, 790, 507, 224, 59, 0 },
};

int16_t fixed_coeff_taps12[64][12] =
{
    {48, 143, 307, 504, 667, 730, 669, 507, 310, 145, 49, 18, },
    {47, 141, 304, 501, 665, 730, 670, 510, 313, 147, 50, 18, },
    {46, 138, 301, 498, 663, 730, 672, 513, 316, 149, 51, 18, },
    {45, 136, 298, 495, 661, 730, 674, 516, 319, 151, 52, 18, },
    {44, 134, 295, 492, 659, 730, 676, 519, 322, 153, 53, 18, },
    {44, 132, 292, 489, 657, 730, 677, 522, 325, 155, 54, 18, },
    {43, 130, 289, 486, 655, 729, 679, 525, 328, 157, 55, 19, },
    {42, 129, 287, 483, 653, 729, 681, 528, 331, 160, 56, 19, },
    {41, 127, 284, 480, 651, 729, 683, 531, 334, 162, 57, 19, },
    {40, 125, 281, 477, 648, 729, 684, 534, 337, 164, 58, 19, },
    {40, 123, 278, 474, 646, 728, 686, 537, 340, 166, 59, 20, },
    {39, 121, 275, 471, 644, 728, 687, 539, 343, 169, 60, 20, },
    {38, 119, 272, 468, 642, 727, 689, 542, 346, 171, 61, 20, },
    {37, 117, 269, 465, 640, 727, 690, 545, 349, 173, 62, 20, },
    {37, 115, 266, 461, 638, 727, 692, 548, 353, 175, 63, 21, },
    {36, 114, 264, 458, 635, 726, 693, 551, 356, 178, 65, 21, },
    {35, 112, 261, 455, 633, 726, 695, 554, 359, 180, 66, 21, },
    {35, 110, 258, 452, 631, 725, 696, 556, 362, 183, 67, 21, },
    {34, 108, 255, 449, 628, 724, 698, 559, 365, 185, 68, 22, },
    {33, 107, 252, 446, 626, 724, 699, 562, 368, 187, 69, 22, },
    {33, 105, 250, 443, 624, 723, 700, 565, 371, 190, 71, 22, },
    {32, 103, 247, 440, 621, 723, 702, 567, 374, 192, 72, 23, },
    {32, 101, 244, 437, 619, 722, 703, 570, 377, 195, 73, 23, },
    {31, 100, 241, 433, 617, 721, 704, 573, 380, 197, 75, 23, },
    {31, 98, 239, 430, 614, 720, 705, 576, 383, 200, 76, 24, },
    {30, 97, 236, 427, 612, 720, 707, 578, 387, 202, 77, 24, },
    {29, 95, 233, 424, 609, 719, 708, 581, 390, 205, 79, 24, },
    {29, 93, 231, 421, 607, 718, 709, 584, 393, 207, 80, 25, },
    {28, 92, 228, 418, 604, 717, 710, 586, 396, 210, 81, 25, },
    {28, 90, 225, 415, 602, 716, 711, 589, 399, 212, 83, 26, },
    {27, 89, 223, 412, 599, 715, 712, 591, 402, 215, 84, 26, },
    {27, 87, 220, 408, 597, 714, 713, 594, 405, 217, 86, 27, },
    {27, 86, 217, 405, 594, 713, 714, 597, 408, 220, 87, 27, },
    {26, 84, 215, 402, 591, 712, 715, 599, 412, 223, 89, 27, },
    {26, 83, 212, 399, 589, 711, 716, 602, 415, 225, 90, 28, },
    {25, 81, 210, 396, 586, 710, 717, 604, 418, 228, 92, 28, },
    {25, 80, 207, 393, 584, 709, 718, 607, 421, 231, 93, 29, },
    {24, 79, 205, 390, 581, 708, 719, 609, 424, 233, 95, 29, },
    {24, 77, 202, 387, 578, 707, 720, 612, 427, 236, 97, 30, },
    {24, 76, 200, 383, 576, 705, 720, 614, 430, 239, 98, 31, },
    {23, 75, 197, 380, 573, 704, 721, 617, 433, 241, 100, 31, },
    {23, 73, 195, 377, 570, 703, 722, 619, 437, 244, 101, 32, },
    {23, 72, 192, 374, 567, 702, 723, 621, 440, 247, 103, 32, },
    {22, 71, 190, 371, 565, 700, 723, 624, 443, 250, 105, 33, },
    {22, 69, 187, 368, 562, 699, 724, 626, 446, 252, 107, 33, },
    {22, 68, 185, 365, 559, 698, 724, 628, 449, 255, 108, 34, },
    {21, 67, 183, 362, 556, 696, 725, 631, 452, 258, 110, 35, },
    {21, 66, 180, 359, 554, 695, 726, 633, 455, 261, 112, 35, },
    {21, 65, 178, 356, 551, 693, 726, 635, 458, 264, 114, 36, },
    {21, 63, 175, 353, 548, 692, 727, 638, 461, 266, 115, 37, },
    {20, 62, 173, 349, 545, 690, 727, 640, 465, 269, 117, 37, },
    {20, 61, 171, 346, 542, 689, 727, 642, 468, 272, 119, 38, },
    {20, 60, 169, 343, 539, 687, 728, 644, 471, 275, 121, 39, },
    {20, 59, 166, 340, 537, 686, 728, 646, 474, 278, 123, 40, },
    {19, 58, 164, 337, 534, 684, 729, 648, 477, 281, 125, 40, },
    {19, 57, 162, 334, 531, 683, 729, 651, 480, 284, 127, 41, },
    {19, 56, 160, 331, 528, 681, 729, 653, 483, 287, 129, 42, },
    {19, 55, 157, 328, 525, 679, 729, 655, 486, 289, 130, 43, },
    {18, 54, 155, 325, 522, 677, 730, 657, 489, 292, 132, 44, },
    {18, 53, 153, 322, 519, 676, 730, 659, 492, 295, 134, 44, },
    {18, 52, 151, 319, 516, 674, 730, 661, 495, 298, 136, 45, },
    {18, 51, 149, 316, 513, 672, 730, 663, 498, 301, 138, 46, },
    {18, 50, 147, 313, 510, 670, 730, 665, 501, 304, 141, 47, },
    {18, 49, 145, 310, 507, 669, 730, 667, 504, 307, 143, 48, },
};

typedef enum {
  XLXN_FIXED_COEFF_SR13,
  XLXN_FIXED_COEFF_SR15,
  XLXN_FIXED_COEFF_SR2,
  XLXN_FIXED_COEFF_SR25,
  XLXN_FIXED_COEFF_TAPS_10,
  XLXN_FIXED_COEFF_TAPS_12,
  XLXN_FIXED_COEFF_TAPS_6,
} XLNX_FIXED_FILTER_COEFF_TYPE;

void copy_filt_set(int16_t dest_filt[64][12], int set)
{
    int i=0, j=0;

    for ( i=0; i<64; i++)
    {
        for ( j=0; j<12; j++)
        {
           switch(set)
           { 	   
              case XLXN_FIXED_COEFF_SR13: dest_filt[i][j] = fixed_coeff_SR13_0[i][j];//<1.5SR
                      break;
              case XLXN_FIXED_COEFF_SR15: dest_filt[i][j] = fixed_coeff_SR15_0[i][j];   //1.5SR
                      break;
              case XLXN_FIXED_COEFF_SR2: dest_filt[i][j] = fixed_coeff_taps8in12[i][j]; //2SR //8tap
                      break;
              case XLXN_FIXED_COEFF_SR25: dest_filt[i][j] = fixed_coeff_SR25_0[i][j]; //2.5SR
                      break;
              case XLXN_FIXED_COEFF_TAPS_10: dest_filt[i][j] = fixed_coeff_taps10in12[i][j]; //10tap
                      break;
              case XLXN_FIXED_COEFF_TAPS_12:
                      dest_filt[i][j] = fixed_coeff_taps12[i][j]; //12tap
                      break;		
              case XLXN_FIXED_COEFF_TAPS_6:
                      dest_filt[i][j] = fixed_coeff_taps6in12[i][j]; //6tap: Always used for up scale
                      break;		
              default:		
                      dest_filt[i][j] = fixed_coeff_taps12[i][j]; //12tap
                      break;		
		   }
        }		   
    }
}

int log2_val(unsigned int val)
{
      int cnt  = 0;
      while(val > 1)
      {
         val=val>>1;
         cnt++;
      }
      return cnt;
}

int feasibilityCheck(int src, int dst, int* filterSize)
{
    int sizeFactor = 4;  
    int xInc = (((int64_t)src << 16) + (dst >> 1)) / dst;
    if (xInc <= 1 << 16)
      *filterSize = 1 + sizeFactor;    // upscale
    else
      *filterSize = 1 + (sizeFactor * src + dst - 1) / dst; 
    
    if (*filterSize > MAX_FILTER_SIZE)
    {
       printf("INFO: FilterSize %d for %d to %d is greater than maximum taps(%d)\n",  *filterSize, src, dst, MAX_FILTER_SIZE);		
       return XMA_ERROR;	  
    }
    return 0;	
}

void Generate_cardinal_cubic_spline(int src, int dst, int filterSize, int64_t B, int64_t C, int16_t* CCS_filtCoeff)
{
#ifdef COEFF_DUMP
    FILE *fp;
    char fname[512];
    sprintf(fname,"coeff_%dTO%d.csv",src,dst);
    fp=fopen(fname,"w");
    /*FILE *fph;
    sprintf(fname,"phase_%dTO%d_2Inc.txt",src,dst);	
    fph=fopen(fname,"w");*/
    //fprintf(fp,"src:%d => dst:%d\n\n",src,dst);
#endif
    int  filterAlign = 4,  one= (1<<14);
    int64_t *coeffFilter =NULL;
    int64_t *coeffFilter_reduced = NULL;	   
    int16_t *outFilter = NULL;
    int16_t *coeffFilter_normalized = NULL;
    int lumXInc      = (((int64_t)src << 16) + (dst >> 1)) / dst;
    int srt = src/dst;
    int lval = log2_val(srt);
    int th0 = 8;
    int lv0 = MIN(lval, th0);	   
    const int64_t fone = (int64_t)1 << (54-lv0);	 	   
    int64_t thr1 = ((int64_t)1 << 31);
    int64_t thr2 = ((int64_t)1<<54)/fone;	   
    int i, xInc, filter2Size, minFilterSize, outFilterSize;	   
    int num_phases = 64;
    int phase_set[64] ={0};
    int64_t xDstInSrc;
    int xx,j,ph1,diff;
    int64_t ld2=0, ph0=0, d=0, coeff=0, dd=0,ddd=0;  
    int phase_cnt =0, singleZP = 0,  min = 0, k=0;
    int64_t cutOff = 0.0;	       
    int64_t error = 0, sum = 0, v = 0;
    int intV =0, rot_idx = 0, col_idx=-1;
    int currCoeff=0, prevCoeff = -1;
    int c = 0, nzRow = 0, mi=0;
    int firstValidP = 0, re_phase_cnt = 0;
    int fstart_Idx=0, fend_Idx=0, half_Idx=0, middleIdx = 0;
  
	   
    xInc = lumXInc;  
    filterSize = MAX(filterSize, 1);
    coeffFilter = (int64_t*) calloc(num_phases*filterSize, sizeof(int64_t)); 
	
    xDstInSrc = xInc - (1<<16);	   
    diff =xDstInSrc;
    unsigned int PhaseH = 0, offset = 0, WriteLoc = 0, WriteLocNext = 0, ReadLoc=0, OutputWrite_En = 0;
	   
    int OutPixels = dst;
    int PixelRate = (int)((float)((src*STEP_PRECISION) + (dst/2))/(float)dst);
    
    // coefficient generation based on scaler IP
    for (i = 0; i < src; i++)
    {
        PhaseH = ((offset>>(STEP_PRECISION_SHIFT-NR_PHASE_BITS))) & (NR_PHASES-1);
        WriteLoc = WriteLocNext;
        
        if ((offset >> STEP_PRECISION_SHIFT) != 0)
        {
            // Take a new sample from input, but don't process anything
            ReadLoc++;
            offset = offset - (1<<STEP_PRECISION_SHIFT);
            OutputWrite_En   = 0;
            WriteLocNext = WriteLoc;
        }
        
        if (((offset >> STEP_PRECISION_SHIFT) == 0) && (WriteLoc<OutPixels))
        {
            // Produce a new output sample
            offset += PixelRate;
            OutputWrite_En   = 1;
            WriteLocNext = WriteLoc+1;
        }
        if (OutputWrite_En) {
            
            //printf("i %d out %d in %d phase %d\n", i, WriteLoc, ReadLoc, PhaseH);
            
            xDstInSrc = ReadLoc*(1<<17) + PhaseH*(1<<11);
            xx = ReadLoc - (filterSize - 2)/2;
            
            //printf("xx %d xDstInSrc %lld\n", xx, xDstInSrc);
            d = (ABS(((int64_t)xx * (1 << 17)) - xDstInSrc)) << 13;
            //printf("d %lld\n", d);

            //count number of phases used for this SR
            if (phase_set[PhaseH] == 0) phase_cnt+=1;
            
            //Filter coeff generation
            for (j = 0; j < filterSize; j++)
            {
                d = (ABS(((int64_t)xx * (1 << 17)) - xDstInSrc)) << 13;
                if (xInc > 1 << 16)
                {
                    //printf("xinc >\n");
                    d = (int64_t)(d *dst/ src);
                }
                
                if (d >= thr1) {
                    coeff = 0.0;
                } else {
                    dd  = (int64_t)(d  * d) >> 30;
                    ddd = (int64_t) (dd * d) >> 30;
                    if (d < 1 << 30)
                    {
                        coeff =  (12 * (1 << 24) -  9 * B - 6 * C) * ddd +
                        (-18 * (1 << 24) + 12 * B + 6 * C) *  dd +
                        (6 * (1 << 24) -  2 * B)         * (1 << 30);
                    }
                    else
                    {
                        coeff =  (-B -  6 * C) * ddd +
                        (6 * B + 30 * C) * dd  +
                        (-12 * B - 48 * C) * d   +
                        (8 * B + 24 * C) * (1 << 30);
                    }
                }
                
                coeff = coeff/thr2;
                coeffFilter[PhaseH * filterSize + j] = coeff;
                xx++;
            }
            if (phase_set[PhaseH] == 0) {
                phase_set[PhaseH] = 1;
            }
        }
    }
       
    //printf("filter size is %d\n", filterSize);
    coeffFilter_reduced = (int64_t*) calloc((num_phases*filterSize), sizeof(int64_t));
    memcpy(coeffFilter_reduced, coeffFilter, sizeof(int64_t)*num_phases*filterSize);
    outFilterSize = filterSize;
    outFilter = (int16_t*) calloc((num_phases*outFilterSize),sizeof(int16_t));
    coeffFilter_normalized = (int16_t*) calloc((num_phases*outFilterSize),sizeof(int16_t));
    
    /* normalize & store in outFilter */
    for ( i = 0; i < num_phases; i++) {
        error = 0;
        sum   = 0;
        
        for (j = 0; j < filterSize; j++) {
            sum += coeffFilter_reduced[i * filterSize + j];
        }
        sum = (sum + one / 2) / one;
        if (!sum) {
            sum = 1;
        }
        for (j = 0; j < outFilterSize; j++) {
            v = coeffFilter_reduced[i * filterSize + j] + error;
            intV  = ROUNDED_DIV(v, sum);
            coeffFilter_normalized[i * (outFilterSize) + j] = intV;
            coeffFilter_normalized[i * (outFilterSize) + j] = coeffFilter_normalized[i * (outFilterSize) + j]>>2; //added to negate double increment and match our precision
            error                                  = v - intV * sum;
        }
    }
    
    for (int p=0; p<num_phases; p++) {
        for (int t=0; t<filterSize; t++) {
            outFilter[p*filterSize + t] = coeffFilter_normalized[p*filterSize + t];
        }
    }
       
    /*incorporate filter less than 12 tap into a 12 tap*/
    fstart_Idx=0, fend_Idx=0, half_Idx=0;
    middleIdx = (MAX_FILTER_SIZE/2); //center location for 12 tap 
    half_Idx = (outFilterSize/2);
    if ( (outFilterSize - (half_Idx<<1)) ==0) //evenOdd
    {
        fstart_Idx = middleIdx - half_Idx;
        fend_Idx = middleIdx + half_Idx;
    }
    else
    {
        fstart_Idx = middleIdx - (half_Idx);
        fend_Idx = middleIdx + half_Idx + 1;
    }
    //printf("DEBUG: outFilterSize=%d fstart_Idx=%d fend_Idx=%d half_Idx=%d\n",outFilterSize,fstart_Idx,fend_Idx,half_Idx);
    
    for ( i = 0; i < num_phases; i++) {
        for ( j = 0; j < MAX_FILTER_SIZE; j++) {
            
            CCS_filtCoeff[i*MAX_FILTER_SIZE + j] = 0;
            if ((j >= fstart_Idx) && (j< fend_Idx))
                CCS_filtCoeff[i*MAX_FILTER_SIZE + j] = outFilter[i * (outFilterSize) + (j-fstart_Idx)];
            
        }
    }
	
#if 1
    /*Make sure filterCoeffs within a phase sum to 4096*/
    int ph_max_sum = 1<<MAX_FILTER_SIZE;
	int sumVal= 0 , maxIdx=0, maxVal=0, diffVal=0;
    for ( i = 0; i < num_phases; i++) {
        sumVal = 0;
        maxVal = 0;
        for ( j = 0; j < MAX_FILTER_SIZE; j++) {
            sumVal+=CCS_filtCoeff[i*MAX_FILTER_SIZE + j];
            if ( CCS_filtCoeff[i*MAX_FILTER_SIZE + j] > maxVal)
            {				  
                maxVal = CCS_filtCoeff[i*MAX_FILTER_SIZE + j];
                maxIdx = j;
            }             			  
        }
        diffVal = ph_max_sum - sumVal ;
        if (diffVal>0)
              CCS_filtCoeff[i*MAX_FILTER_SIZE + maxIdx] = CCS_filtCoeff[i*MAX_FILTER_SIZE + maxIdx]+diffVal;
    }   
#endif
	
           
#ifdef COEFF_DUMP                       
    fprintf(fp,"taps/phases, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n");
    for ( i = 0; i < num_phases; i++) {
        fprintf(fp,"%d, ", i+1);
        for ( j = 0; j < MAX_FILTER_SIZE; j++) {
            fprintf(fp,"%d,  ",CCS_filtCoeff[i*MAX_FILTER_SIZE + j]);
        }
        fprintf(fp,"\n");
    }      
#endif      

    free(coeffFilter);
    free(coeffFilter_reduced);
    free(outFilter);
    free(coeffFilter_normalized);
#ifdef COEFF_DUMP	
    fclose(fp);
#endif	
}


/**
 * @}
 */
 
#ifdef __cplusplus
}
#endif

#endif
